// Generated by CoffeeScript 1.3.1
(function() {
  var $, Validate, ValidationFunctions;

  $ = window.jQuery;

  ValidationFunctions = (function() {

    ValidationFunctions.name = 'ValidationFunctions';

    function ValidationFunctions($form) {
      this.$form = $form;
    }

    ValidationFunctions.prototype.required = function($field, options) {
      if (!$field.val()) {
        return this.$form.trigger('vand:required', {
          field: $field,
          valid: false
        });
      }
    };

    ValidationFunctions.prototype.email = function($field, options) {
      return true;
    };

    ValidationFunctions.prototype.equal = function($field, options) {
      var that_val, this_val;
      this_val = $field.val();
      that_val = this.$form.find("[name=" + options.field + "]").val();
      if (this_val !== that_val) {
        return this.$form.trigger('vand:equal', {
          field: $field,
          valid: false
        });
      }
    };

    ValidationFunctions.prototype.password = function($field, options) {
      var password_length, required_length;
      password_length = $field.val().length;
      required_length = parseInt(options.length);
      if (password_length < required_length) {
        return this.$form.trigger('vand:password:length', {
          field: $field,
          valid: false,
          password_length: password_length,
          required_length: required_length
        });
      }
    };

    return ValidationFunctions;

  })();

  Validate = (function() {

    Validate.name = 'Validate';

    function Validate(form, options) {
      var field, _i, _len, _ref;
      this.form = form;
      this.options = options;
      this.$form = $(this.form);
      this.funcs = new ValidationFunctions(this.$form);
      _ref = this.$form.find('[data-vand-validation]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        this.attach(field);
      }
    }

    Validate.prototype.attach = function(field) {
      var $el, $field, data, el_name, ev, trigger, triggers, _i, _len, _ref, _results,
        _this = this;
      $field = $(field);
      data = $field.data();
      triggers = data.vandTrigger.split(' ');
      _results = [];
      for (_i = 0, _len = triggers.length; _i < _len; _i++) {
        trigger = triggers[_i];
        _ref = trigger.split(':'), el_name = _ref[0], ev = _ref[1];
        switch (el_name) {
          case "form":
            $el = this.$form;
            break;
          case "this":
            $el = $field;
            break;
          default:
            $el = this.$form.find("[name=" + el_name + "],#" + el_name + ",." + el_nam);
        }
        _results.push($el.bind(ev, function() {
          return _this.validate(field);
        }));
      }
      return _results;
    };

    Validate.prototype.validate = function(field) {
      var $field, arg, data, key, validation_args, validation_func, validation_options, validation_string, validations, value, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
      $field = $(field);
      data = $field.data();
      validations = data.vandValidation.split(' ');
      _results = [];
      for (_i = 0, _len = validations.length; _i < _len; _i++) {
        validation_string = validations[_i];
        _ref = validation_string.split('?'), validation_func = _ref[0], validation_args = _ref[1];
        validation_options = {};
        if (validation_args) {
          _ref1 = validation_args.split('&');
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            arg = _ref1[_j];
            _ref2 = arg.split('='), key = _ref2[0], value = _ref2[1];
            validation_options[key] = value;
          }
        }
        _results.push(this.funcs[validation_func]($field, validation_options));
      }
      return _results;
    };

    return Validate;

  })();

  $.fn.validate = function(options) {
    return this.each(function() {
      var $this, $valid;
      $this = $(this);
      $valid = $this.data('validate');
      if (!$valid) {
        $valid = new Validate(this, options);
        return $this.data('validate', $valid);
      } else {
        return $valid.validate(options);
      }
    });
  };

  $(function() {
    return $('#form01').validate().on('vand:equal', function(ev, data) {
      return data.field.parents('.control-group').addClass('error');
    }).on('vand:required', function(ev, data) {
      return data.field.parents('.control-group').addClass('error');
    }).on('vand:password:length', function(ev, data) {
      return data.field.parents('.control-group').addClass('error');
    });
  });

}).call(this);
